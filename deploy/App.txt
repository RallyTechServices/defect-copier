<!DOCTYPE html>
<html>
<head>
    <title>Defect Copier</title>
    <!--  (c) 2014 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Tue Nov 11 2014 10:54:09 GMT-0800 (PST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Tue Nov 11 2014 10:54:09 GMT-0800 (PST)";
        var CHECKSUM = 2955801451;
    </script>
    
    <script type="text/javascript" src="/apps/2.0rc3/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.override(Rally.ui.tree.ProjectTree, {
    childItemsStoreConfigForParentRecordFn: function(record){
    
        var storeConfig = {
            fetch: ['Name', 'Children:summary[State]', 'State', 'Workspace'],
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        };
        
        if(record.get('_type') === 'workspace'){
            return Ext.apply(storeConfig, {
                filters: [{
                    property: 'Parent',
                    value: 'null'
                }],
                context: {
                    workspace: record.get('_ref'),
                    project: null
                }
            });
        } else {
            return Ext.apply(storeConfig, {
                filters: [{
                    property: 'Parent',
                    value: record.get('_ref')
                }],
                context: {
                    workspace: record.get('Workspace')._ref,
                        project: null
                    }
                });
            }
        }
    }
});
Ext.define('Rally.technicalservices.dialog.ProjectChooserDialog', {
    extend: 'Rally.ui.dialog.Dialog',        
    alias:'widget.tsprojectchooserdialog',
    margin: 10,
    items: {
        xtype: 'panel',
        border: false,
        items: [
            {
                xtype: 'container',
                itemId: 'selector_box',
                layout: 'fit'
            }
        ]
    },
    
    width: 250,
    config: {
        /**
         * @cfg {String}
         * Text to be displayed on the button when selection is complete
         */
        selectionButtonText: 'Done'
    },
    
    constructor: function(config) {
        this.mergeConfig(config);

        this.callParent([this.config]);
    },
    
    initComponent: function() {
        this.callParent(arguments);
        this.addEvents(
            /**
             * @event targetChosen
             * Fires when user clicks done after choosing project/workspace
             * 
             * @param {Rally.technicalservices.dialog.ProjectChooserDialog} this
             * @param {Rally.domain.WsapiModel} selected project
             */
            'targetChosen'
        );

        this.addCls('chooserDialog');

        this._buildButtons();
        this._addProjectSelector();
    },
    
    _addProjectSelector: function(){
        var me = this;
        
        this.down('#selector_box').add({
            xtype:'rallyprojectpicker',
            listeners: {
                change: function() {
                    console.log(this.getWorkspace());
                    me.selected_project = this.getSelectedRecord();
                }
            }
        });
    },
    /**
     * @private
     */
    _buildButtons: function() {

        this.down('panel').addDocked({
            xtype: 'toolbar',
            dock: 'bottom',
            padding: '0 0 10 0',
            layout: {
                type: 'hbox',
                pack: 'center'
            },
            ui: 'footer',
            items: [
                {
                    xtype: 'rallybutton',
                    text: this.selectionButtonText,
                    cls: 'primary small',
                    scope: this,
                    userAction: 'clicked done in dialog',
                    handler: function() {
                        this.fireEvent('targetChosen', this.selected_project);
                        this.close();
                    }
                },
                {
                    xtype: 'rallybutton',
                    text: 'Cancel',
                    cls: 'secondary small',
                    handler: this.close,
                    scope: this,
                    ui: 'link'
                }
            ]
        });

    }
});

Ext.define('CustomApp', {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    source_defect: null,
    target_workspace: null,
    target_project: null,
    items: [
        {xtype:'container', itemId:'button_box', defaults: {margin: 5} },
        {xtype:'container', itemId:'display_box', defaults: {margin: 5} },
        {xtype:'container', itemId:'input_box', defaults: {margin: 5} },
        {xtype:'tsinfolink'}
    ],
    launch: function() {
        this._addButtons(this.down('#button_box'));
    },
    _addButtons: function(container) {
        container.add({
            xtype:'rallybutton',
            text: 'Select Defect',
            itemId: 'select_defect_button',
            listeners: {
                scope: this,
                click: this._chooseDefect
            }
        });
        
        container.add({
            xtype:'rallybutton',
            text: 'Select Destination',
            itemId: 'select_destination_button',
            listeners: {
                scope: this,
                click: this._chooseTarget
            }
        });
        
        container.add({
            xtype:'rallybutton',
            text: 'Create Copy',
            itemId: 'copy_button',
            disabled: true
        });
    },
    _chooseDefect: function(button) {
        Ext.create('Rally.ui.dialog.ChooserDialog', {
            artifactTypes: ['defect'],
            autoShow: true,
            title: 'Choose Defect',
            listeners: {
                artifactChosen: function(selectedRecord){
                    this.source_defect = selectedRecord;
                    this._updateSelectionDisplay();
                },
                scope: this
            }
         });
    },
    _chooseTarget: function(button) {
        Ext.create('Rally.technicalservices.dialog.ProjectChooserDialog', {
             autoShow: true,
             title: 'Choose Workspace and Project',
             listeners: {
                scope: this,
                targetChosen: function(selectedProject) {
                    this.target_project = selectedProject;
                    this._updateSelectionDisplay();
                }
             }
         });
    },
    _updateSelectionDisplay: function() {
        var container = this.down('#display_box');
        container.removeAll();
        
        this.logger.log( "Defect to Copy: ", this.source_defect);
        this.logger.log( "Target Workspace: ",  this.target_workspace);
        this.logger.log( "Target Project: ", this.target_project);
        
        var source_defect_display_string = "Defect Not Selected";
        if ( this.source_defect ) {
            var source_defect_display_string =  this.source_defect.get('FormattedID') + ": " + this.source_defect.get('Name');
        }
        
        var target_workspace_display_string = "Workspace Not Selected";
        if ( this.target_workspace ) {
            target_workspace_display_string = this.target_workspace.get('Name') ;
        }
        var target_project_display_string = "Project Not Selected";
        if ( this.target_project ) {
            target_project_display_string = this.target_project.get('Name');
        }
        
        container.add({
            xtype:'container', 
            html: '<strong>Source Defect: </strong> ' + source_defect_display_string
        });
        
        container.add({
            xtype:'container', 
            html: '<strong>Target Workspace: </strong> ' + target_workspace_display_string
        });
        
        container.add({
            xtype:'container', 
            html: '<strong>Target Project: </strong> ' + target_project_display_string
        });
        
    }
});
            
               Rally.launchApp('CustomApp', {
                   name: 'Defect Copier'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>